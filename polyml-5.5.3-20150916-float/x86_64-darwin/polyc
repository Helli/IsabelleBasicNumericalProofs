#! /bin/sh
prefix=/Users/immler/work/floats/hellauer/polyml-5.5.3-20150916-float/src/x86_64-darwin
exec_prefix=${prefix}
BINDIR=${exec_prefix}/bin
LINK=gcc
LIBDIR=${exec_prefix}/lib
LIBS="-lstdc++ "
CFLAGS="-arch x86_64 -O3 -I../libffi/include -I../libffi/include"

# Extra options for Windows.  config.status sets these conditionals to either "" or "#".

EXTRALDFLAGS=""
#EXTRALDFLAGS="-Wl,-u,WinMain"
##EXTRALDFLAGS="-Wl,-u,WinMain"
##EXTRALDFLAGS="-Wl,-u,_WinMain@16 -Wl,--large-address-aware"
##EXTRALDFLAGS="-Wl,-u,_WinMain@16 -Wl,--large-address-aware"
#EXTRALDFLAGS+="-mwindows"
##EXTRALDFLAGS+="-mconsole"

#SUFFIX="obj"
SUFFIX="o"

# Msys passes the Windows TEMP in temp (lower case)
#TEMPORARYDIR=${temp:-/tmp}
TEMPORARYDIR=/tmp

# Extra options for Mac OS X
EXTRALDFLAGS="-Wl,-no_pie"

TMPOBJFILE=${TEMPORARYDIR}/polyobj.$$.$SUFFIX
trap 'rm -f $TMPOBJFILE' 0

compile()
{
    echo "use (List.nth(CommandLine.arguments(), 2)); PolyML.export(List.nth(CommandLine.arguments(), 3), main);" | ${BINDIR}/poly -q --error-exit  "$1" "$2"
}

link()
{
    if [ X"$2" = "X" ]
    then
        ${LINK} ${EXTRALDFLAGS} ${CFLAGS} $1 -L${LIBDIR} -lpolymain -lpolyml ${LIBS}
    else
        ${LINK} ${EXTRALDFLAGS} ${CFLAGS} $1 -o $2 -L${LIBDIR} -lpolymain -lpolyml ${LIBS}
    fi
}

printhelp()
{
    echo "Usage: polyc [OPTION]... [SOURCEFILE]"
    echo Compile and link a Standard ML source file with Poly/ML.
    echo
    echo "   -c           Compile but do not link.  The object file is written to the source file with .$SUFFIX extension."
    echo "   -o output    Write the executable file to 'output'"
    echo "   --help       Write this text and exit"
    exit
}

usage()
{
    echo $1
    echo "Usage: polyc [OPTION]... [SOURCEFILE]"
    exit 1
}

checkml()
{
    extension="${1##*.}"
    case "$extension" in
        sml|ML)
             return 0 ;;
        o|obj)
             return 1;;
        *)
             test -r $1 && file -b $1 | grep -q text ;;
    esac
}

sourcefile=""
objectfile=""
execfile=""
compileonly="no"

while [ $# -gt 0 ]
do
    case "$1" in
        --help)
            printhelp ;;
        -c) compileonly="yes";;
        -o)
            shift
            [ $# -eq 0 ] && usage "Expected file name after -o"
            execfile="$1";;
        *)
            [ X"$sourcefile" = "X" ] || usage "Only one source file name allowed"
            sourcefile="$1";;
    esac
    shift
done

[ X"$sourcefile" = "X" ] && usage "No input files"
[ -r "$sourcefile" ] || usage "Error: $sourcefile: No such file"

case "$compileonly" in
     yes)
         objectfile=${sourcefile%%.*}
         compile $sourcefile $objectfile
         ;;
     no)
         if checkml $sourcefile
         then
             compile $sourcefile $TMPOBJFILE && link $TMPOBJFILE $execfile
         else
             link $sourcefile $execfile
         fi
         ;;
esac
